
# NECESSARY EL GAMAL FUNCTIONS
def egcd(a, b):
    x,y, u,v = 0,1, 1,0
    while a != 0:
        q, r = b//a, b%a
        m, n = x-u*q, y-v*q
        b,a, x,y, u,v = a,r, u,v, m,n
    gcd = b
    return gcd, x, y
def modinv(a, m):
    if a < 0:
        a = a+m
    gcd, x, y = egcd(a, m)
    if gcd != 1:
        return None  # modular inverse does not exist
    else:
        return x % m

"""
MY SOLUTION BELOW
"""

# Set parameters
q = 18798550137809403692735104184972412958968514486332262326565311151933
p = 11279899774556550725451194903784713026384286151312121756398221299489967668444297211442190481157729424449978598376284007109290661796602473182956102055408002152382737163327315299036415704362879785531983487748708139941103001280426610383082168846990524308250816363484621280823118152005330000215710001834952325778126045210054883931190889274522940506926633207452468878287619762555661161472058412713380267029099885423751131088131600959163372786268852300288277442445921902016320618340599744714658259342511902449063582612798976487112847078216977087566931510721670213285746593232389594377359688243924846227715654172303319725729
g = 10610066734223884244269470362481483136960301807078898929940288181003671236139096049400872455034088073321358310023401904150574318139018365964067028553381765937148999729905079994736794420168329934191814904388134973765057414918337372234968120303771248629592955517452232450853305437266386035858179145769878079229091209468721977148948420827529696338858748383553288324783871598812799772599817138218077284020719858652597982487139003192682474755961109426813754312654700679642022985576653789336470547825149973736020747000250711113826295975043738144947035366065933492644148271435890841702023406532461346485717436170402678091654
h  =  8237983723884733590815366123502780300688394890563726598571958361235494312412965696776404328355422830840172692048776807625921241090178480507962301001528346080010115785619502468966058018785162580733012228185491539084714665384776953975537108779969801901053884635410767675064752928441021751002366618278520045290264014292073532679906577078228721687691579695299689551599702291179793947196555176213710527885649576775358154153433438614650800738178997931930579272565523382672377013073116427550080383517527636198870809043546224944515070590263454556488296806565228783660953362167801216698145427611750729722293218921701624951147

r = 6762429171013400534049253809754131822608619155949985623019541764460567802534369643416769253299907104793089895537968101136673714536258025486597350413502302210306344721292294586003869518127971455191891229888915101708317444744781351083197521803530670268335799214971082355711914506912810620353630226068785208660214497528460263987261777371997213698493921850191375188613297104112558087715366179974649732402454048522421398404223017849042814441910985966961666242946790430498393273355080380133619355405910800623569442247454438316120279854979028539636635244767973584837274969899589632872128433139828100757690363818954190271669
t = 9808246601089094680626241193603634694639792286610780294399411329509584064458520435804786960451657522172676402317438804814178415729398371686827492856977570369543508393128980955019571622603035913783577370175883863627548858517667878225059222870748377126132252969142013591862325162790300728279339676725877192631175204201935975287491786865002374198160687011436758560681012459052033614495643331933754772096764353333959237686610575688911144028340818511947935274844501007810079132166398267792064564838607585042221781952025946306940957645256024771741884998576644918920438801229219489456124424997547169560091871379131048090344


# Function to find k using brute force
def find_k(g, p):
    for k in range(1, 2**16):
        r_ = pow(g, k, p)
        if r_ == r:
            print(f"Found the k value.\nk: {k}\n")
            return k

# Find k
k = find_k(g, p)

# Compute h^k and its inverse
h_k = pow(h, k, p)
h_k_inv = modinv(h_k, p)

# Find message
message = (t * h_k_inv) % p

# Decode the message
message = message.to_bytes((message.bit_length() + 7) // 8, byteorder='big')
message = message.decode('utf-8')
print(f"Decrypted message: {message}")

